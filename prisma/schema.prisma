generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")

}

model Event {
  eventUuid       String      @id @default(uuid())
  time            Int
  action          EventAction
  position        Position
  points          Int
  scoutReportUuid String
  scoutReport     ScoutReport @relation(fields: [scoutReportUuid], references: [uuid], onDelete: Cascade)
  @@index([scoutReportUuid])
}

enum Position {
  NONE
  AMP
  SPEAKER
  TRAP
  WING_NEAR_AMP
  WING_FRONT_OF_SPEAKER
  WING_CENTER
  WING_NEAR_SOURCE
  GROUND_NOTE_ALLIANCE_NEAR_AMP
  GROUND_NOTE_ALLIANCE_FRONT_OF_SPEAKER
  GROUND_NOTE_ALLIANCE_BY_SPEAKER
  GROUND_NOTE_CENTER_FARTHEST_AMP_SIDE
  GROUND_NOTE_CENTER_TOWARD_AMP_SIDE
  GROUND_NOTE_CENTER_CENTER
  GROUND_NOTE_CENTER_TOWARD_SOURCE_SIDE
  GROUND_NOTE_CENTER_FARTHEST_SOURCE_SIDE
}

enum EventAction {
  LEAVE
  PICK_UP
  DROP_RING
  SCORE
  DEFENSE
  FEED_RING
  STARTING_POSITION
}

model FeatureToggle {
  feature String  @id
  enabled Boolean @default(true)
}

// model FlaggedScoutReport {
//   uuid            String      @id @default(uuid())
//   note            String
//   scoutReportUuid String      @unique
//   scoutReport     ScoutReport @relation(fields: [scoutReportUuid], references: [uuid])
// }

model TeamMatchData {
  key           String        @id
  tournamentKey String
  tournament    Tournament    @relation(fields: [tournamentKey], references: [key], onDelete: Cascade)
  matchNumber   Int           @db.SmallInt
  teamNumber    Int
  matchType     MatchType
  scoutReports  ScoutReport[]
  @@index([tournamentKey, teamNumber])

}

enum MatchType {
  QUALIFICATION
  ELIMINATION
}

model MutablePicklist {
  uuid          String      @id @default(uuid())
  teams         Int[]
  authorId      String
  author        User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  name          String
  tournamentKey String?
  tournament    Tournament? @relation(fields: [tournamentKey], references: [key])
}

model ScoutReport {
  uuid               String              @id @default(uuid())
  teamMatchKey       String             
  teamMatchData      TeamMatchData       @relation(fields: [teamMatchKey], references: [key], onDelete: Cascade)
  startTime          DateTime
  notes              String
  robotRole          RobotRole
  stage              StageResult
  highNote           HighNoteResult
  pickUp             PickUp
  driverAbility      Int
  scouterUuid        String
  scouter            Scouter             @relation(fields: [scouterUuid], references: [uuid], onDelete: Cascade)
  events             Event[]   

  // flaggedScoutReport FlaggedScoutReport?
}

enum RobotRole {
  OFFENSE
  DEFENSE
  FEEDER
  IMMOBILE
}

enum HighNoteResult {
  NOT_ATTEMPTED
  FAILED
  SUCCESSFUL
}

enum StageResult {
  NOTHING
  PARK
  ONSTAGE
  ONSTAGE_HARMONY
}

enum PickUp {
  GROUND
  CHUTE
  BOTH
}

model ScouterScheduleShift {
  uuid                    String         @id @default(uuid())
  sourceTeamNumber        Int
  sourceTeam              RegisteredTeam @relation(fields: [sourceTeamNumber], references: [number], onDelete : Cascade)
  tournamentKey           String
  tournament              Tournament     @relation(fields: [tournamentKey], references: [key], onDelete: Cascade)
  startMatchOrdinalNumber Int
  endMatchOrdinalNumber   Int
  team1                   Scouter[] @relation(name: "Team1")
  team2                   Scouter[] @relation(name: "Team2")
  team3                   Scouter[] @relation(name: "Team3")
  team4                   Scouter[] @relation(name: "Team4")
  team5                   Scouter[] @relation(name: "Team5")
  team6                   Scouter[] @relation(name: "Team6")

}

model Scouter {
  uuid               String         @id @default(uuid())
  name               String?
  sourceTeamNumber   Int
  sourceTeam         RegisteredTeam @relation(fields: [sourceTeamNumber], references: [number], onDelete: Cascade)
  strikes            Int            @default(0)
  scouterReliability Int            @default(0)
  scoutReports       ScoutReport[]
  Team1Shifts                ScouterScheduleShift[] @relation(name: "Team1")
  Team2Shifts                ScouterScheduleShift[] @relation(name: "Team2")
  Team3Shifts                ScouterScheduleShift[] @relation(name: "Team3")
  Team4Shifts                ScouterScheduleShift[] @relation(name: "Team4")
  Team5Shifts                ScouterScheduleShift[] @relation(name: "Team5")
  Team6Shifts                ScouterScheduleShift[] @relation(name: "Team6")
  @@index([sourceTeamNumber])

}

model SharedPicklist {
  uuid          String @id @default(uuid())
  name          String
  totalPoints   Float    
  defense       Float 
  pickUps       Float
  stage         Float
  autoPoints    Float
  driverAbility Float
  speakerScores Float
  ampScores     Float
  teleopPoints  Float
  trapScores    Float
  feeds         Float

  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Team {
  number         Int             @id
  name           String
  registeredTeam RegisteredTeam?
}

model RegisteredTeam {
  number                Int                    @id
  team                  Team                   @relation(fields: [number], references: [number], onDelete: Cascade)
  code                  String                 @unique // 6 digit alphanumeric, case-insensitive code
  email                 String
  emailVerified         Boolean                @default(false)
  teamApproved          Boolean                @default(false)
  website               String?
  scouterScheduleShifts ScouterScheduleShift[] 
  scouters              Scouter[] 
  users                 User[]
}

model Tournament {
  key                   String                 @id
  name                  String
  location              String?
  date                  String?
  teamMatchData         TeamMatchData[]
  scouterScheduleShifts ScouterScheduleShift[]
  mutablePicklists      MutablePicklist[]
}

model User {
  id               String            @id
  teamNumber       Int?
  team             RegisteredTeam?   @relation(fields: [teamNumber], references: [number], onDelete: Cascade)
  email            String            @unique
  emailVerified    Boolean           @default(false)
  username         String?
  role             UserRole          @default(ANALYST)
  tournamentSource String[]
  teamSource       Int[]
  mutablePicklists MutablePicklist[] 
  sharedPicklists  SharedPicklist[]
}

enum UserRole {
  ANALYST
  SCOUTING_LEAD
}

