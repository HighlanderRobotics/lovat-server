generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_DATABASE_URL")
}

model Event {
  eventUuid       String      @id @default(uuid())
  time            Int
  action          EventAction
  position        Position
  points          Int
  scoutReportUuid String
  scoutReport     ScoutReport @relation(fields: [scoutReportUuid], references: [uuid], onDelete: Cascade)

  @@index([scoutReportUuid])
}

enum Position {
  NONE
  START_ONE
  START_TWO
  START_THREE
  START_FOUR
  LEVEL_ONE
  LEVEL_TWO
  LEVEL_THREE
  LEVEL_FOUR
  LEVEL_ONE_A
  LEVEL_ONE_B
  LEVEL_ONE_C
  LEVEL_TWO_A
  LEVEL_TWO_B
  LEVEL_TWO_C
  LEVEL_THREE_A
  LEVEL_THREE_B
  LEVEL_THREE_C
  LEVEL_FOUR_A
  LEVEL_FOUR_B
  LEVEL_FOUR_C
  GROUND_PIECE_A
  GROUND_PIECE_B
  GROUND_PIECE_C
  CORAL_STATION_ONE
  CORAL_STATION_TWO
}

enum EventAction {
  PICKUP_CORAL
  PICKUP_ALGAE
  FEED
  AUTO_LEAVE
  DEFEND
  SCORE_NET
  FAIL_NET
  SCORE_PROCESSOR
  SCORE_CORAL
  DROP_ALGAE
  DROP_CORAL
  START_POSITION
}

model FeatureToggle {
  feature String  @id
  enabled Boolean @default(true)
}

// model FlaggedScoutReport {
//   uuid            String      @id @default(uuid())
//   note            String
//   scoutReportUuid String      @unique
//   scoutReport     ScoutReport @relation(fields: [scoutReportUuid], references: [uuid])
// }

model TeamMatchData {
  key           String        @id
  tournamentKey String
  tournament    Tournament    @relation(fields: [tournamentKey], references: [key], onDelete: Cascade)
  matchNumber   Int           @db.SmallInt
  teamNumber    Int
  matchType     MatchType
  scoutReports  ScoutReport[]

  @@index([tournamentKey, teamNumber])
}

enum MatchType {
  QUALIFICATION
  ELIMINATION
}

model MutablePicklist {
  uuid          String      @id @default(uuid())
  teams         Int[]
  authorId      String
  author        User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  name          String
  tournamentKey String?
  tournament    Tournament? @relation(fields: [tournamentKey], references: [key])
}

model ScoutReport {
  uuid                  String           @id @default(uuid())
  teamMatchKey          String
  teamMatchData         TeamMatchData    @relation(fields: [teamMatchKey], references: [key], onDelete: Cascade)
  startTime             DateTime
  notes                 String
  robotRole             RobotRole
  algaePickup           AlgaePickup
  coralPickup           CoralPickup
  bargeResult           BargeResult
  knocksAlgae           KnocksAlgae
  underShallowCage      UnderShallowCage
  robotBrokeDescription String           @default("null")
  driverAbility         Int
  scouterUuid           String
  scouter               Scouter          @relation(fields: [scouterUuid], references: [uuid], onDelete: Cascade)
  events                Event[]
  // flaggedScoutReport FlaggedScoutReport?
}

enum RobotRole {
  OFFENSE
  DEFENSE
  FEEDER
  IMMOBILE
}

enum AlgaePickup {
  NONE
  GROUND
  REEF
  BOTH
}

enum KnocksAlgae {
  NO
  YES
}

enum AutoLeave {
  NO
  YES
}

enum UnderShallowCage {
  NO
  YES
}

enum CoralPickup {
  NONE
  GROUND
  STATION
  BOTH
}

enum BargeResult {
  NOT_ATTEMPTED
  PARKED
  SHALLOW
  FAILED_SHALLOW
  DEEP
  FAILED_DEEP
}

model ScouterScheduleShift {
  uuid                    String         @id @default(uuid())
  sourceTeamNumber        Int
  sourceTeam              RegisteredTeam @relation(fields: [sourceTeamNumber], references: [number], onDelete: Cascade)
  tournamentKey           String
  tournament              Tournament     @relation(fields: [tournamentKey], references: [key], onDelete: Cascade)
  startMatchOrdinalNumber Int
  endMatchOrdinalNumber   Int
  team1                   Scouter[]      @relation(name: "Team1")
  team2                   Scouter[]      @relation(name: "Team2")
  team3                   Scouter[]      @relation(name: "Team3")
  team4                   Scouter[]      @relation(name: "Team4")
  team5                   Scouter[]      @relation(name: "Team5")
  team6                   Scouter[]      @relation(name: "Team6")
}

model Scouter {
  uuid               String                 @id @default(uuid())
  name               String?
  sourceTeamNumber   Int
  sourceTeam         RegisteredTeam         @relation(fields: [sourceTeamNumber], references: [number], onDelete: Cascade)
  strikes            Int                    @default(0)
  scouterReliability Int                    @default(0)
  scoutReports       ScoutReport[]
  team1Shifts        ScouterScheduleShift[] @relation(name: "Team1")
  team2Shifts        ScouterScheduleShift[] @relation(name: "Team2")
  team3Shifts        ScouterScheduleShift[] @relation(name: "Team3")
  team4Shifts        ScouterScheduleShift[] @relation(name: "Team4")
  team5Shifts        ScouterScheduleShift[] @relation(name: "Team5")
  team6Shifts        ScouterScheduleShift[] @relation(name: "Team6")

  @@index([sourceTeamNumber])
}

model SharedPicklist {
  uuid              String @id @default(uuid())
  name              String
  totalPoints       Float
  defense           Float
  driverAbility     Float
  autoPoints        Float
  algaePickups      Float
  coralPickups      Float
  barge             Float
  coralLevel1Scores Float
  coralLevel2Scores Float
  coralLevel3Scores Float
  coralLevel4Scores Float
  algaeProcessor    Float
  algaeNet          Float
  teleopPoints      Float
  feeds             Float
  authorId          String
  author            User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Team {
  number         Int             @id
  name           String
  registeredTeam RegisteredTeam?
}

model RegisteredTeam {
  number                Int                    @id
  team                  Team                   @relation(fields: [number], references: [number], onDelete: Cascade)
  code                  String                 @unique // 6 digit alphanumeric, case-insensitive code
  email                 String
  emailVerified         Boolean                @default(false)
  teamApproved          Boolean                @default(false)
  slackChannels         SlackWorkspace[]
  website               String?
  scouterScheduleShifts ScouterScheduleShift[]
  scouters              Scouter[]
  users                 User[]
}

model SlackWorkspace {
  workspaceId   String              @id
  owner         Int?
  name          String
  authToken     String
  subscriptions SlackSubscription[]
  team          RegisteredTeam?     @relation(fields: [owner], references: [number], onDelete: Cascade)
  botUserId     String
  authUserId    String
}

model SlackSubscription {
  channelId       String         @id
  workspaceId     String
  workspace       SlackWorkspace @relation(fields: [workspaceId], references: [workspaceId], onDelete: Cascade)
  subscribedEvent WarningType
}

enum WarningType {
  AUTO_LEAVE
  BREAK
}

model Tournament {
  key                   String                 @id
  name                  String
  location              String?
  date                  String?
  teamMatchData         TeamMatchData[]
  scouterScheduleShifts ScouterScheduleShift[]
  mutablePicklists      MutablePicklist[]
}

model User {
  id               String            @id
  teamNumber       Int?
  team             RegisteredTeam?   @relation(fields: [teamNumber], references: [number], onDelete: Cascade)
  email            String            @unique
  emailVerified    Boolean           @default(false)
  username         String?
  role             UserRole          @default(ANALYST)
  tournamentSource String[]
  teamSource       Int[]
  mutablePicklists MutablePicklist[]
  sharedPicklists  SharedPicklist[]
}

enum UserRole {
  ANALYST
  SCOUTING_LEAD
}
