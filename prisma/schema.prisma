generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Event {
  eventUuid       String      @id @default(uuid())
  time            Int
  action          EventAction
  position        Position
  points          Int
  scoutReportUuid String
  scoutReport     ScoutReport @relation(fields: [scoutReportUuid], references: [uuid])
}
enum Position {
  NONE
  PLACE_HOLDER
}
enum EventAction {
  PICK_UP_CONE
  PICK_UP_CUBE
  PLACE_OBJECT
}

model FeatureToggle {
  feature String  @id
  enabled Boolean @default(true)
}

model FlaggedScoutReport {
  uuid            String      @id @default(uuid())
  note            String
  scoutReportUuid String      @unique
  scoutReport     ScoutReport @relation(fields: [scoutReportUuid], references: [uuid])
}

model TeamMatchData {
  key           String        @id
  tournamentKey String
  tournament    Tournament    @relation(fields: [tournamentKey], references: [key])
  matchNumber   Int           @db.SmallInt
  teamNumber    Int
  matchType     MatchType
  scoutReports  ScoutReport[]
}

enum MatchType {
  QUALIFICATION
  ELIMINATION
}

model MutablePicklist {
  uuid             String @id @default(uuid())
  teams            Int[]
  authorId         String
  author           User   @relation(fields: [authorId], references: [id])
  name             String
}

model ScoutReport {
  uuid                String                @id @default(uuid())
  teamMatchKey        String
  teamMatchData       TeamMatchData         @relation(fields: [teamMatchKey], references: [key])
  startTime           String
  notes               String
  links               Int
  robotRole           RobotRole
  autoChallengeResult AutoChallengeResult
  challengeResult     TeleopChallengeResult
  penaltyCard         PenaltyCard
  driverAbility       Int
  scouterUuid         String
  scouter             Scouter               @relation(fields: [scouterUuid], references: [uuid])
  events              Event[]
  flaggedScoutReport  FlaggedScoutReport?
}

enum RobotRole {
  OFFENSE
  DEFENSE
  FEEDER
  IMMOBILE
}

enum AutoChallengeResult {
  NONE
  DOCKED
  ENGAGED
  FAILED
  MOBILITY
}

enum TeleopChallengeResult {
  NONE
  DOCKED
  ENGAGED
  FAILED
  IN_COMMUNITY
}

enum PenaltyCard {
  NONE
  YELLOW
  RED
}

model ScouterScheduleShift {
  uuid                    String         @id @default(uuid())
  sourceTeamNumber        Int
  sourceTeam              RegisteredTeam @relation(fields: [sourceTeamNumber], references: [number])
  tournamentKey           String
  tournament              Tournament     @relation(fields: [tournamentKey], references: [key])
  startMatchOrdinalNumber Int
  endMatchOrdinalNumber   Int
  team1                   String[]
  team2                   String[]
  team3                   String[]
  team4                   String[]
  team5                   String[]
  team6                   String[]
}

model Scouter {
  uuid               String         @id @default(uuid())
  name               String?
  sourceTeamNumber   Int
  sourceTeam         RegisteredTeam @relation(fields: [sourceTeamNumber], references: [number])
  strikes            Int            @default(0)
  scouterReliability Int            @default(0)
  scoutReports       ScoutReport[]
}

model SharedPicklist {
  uuid     String @id @default(uuid())
  name     String
  avgTotal Int    @db.SmallInt
  authorId String
  author   User   @relation(fields: [authorId], references: [id])
}

model Team {
  number         Int             @id
  name           String
  registeredTeam RegisteredTeam?
}

model RegisteredTeam {
  number                Int                    @id
  team                  Team                   @relation(fields: [number], references: [number])
  code                  String                    @unique // 6 digit alphanumeric, case-insensitive code
  email                 String
  emailVerified         Boolean                @default(false)
  teamApproved          Boolean                @default(false)
  website               String?
  scouterScheduleShifts ScouterScheduleShift[]
  scouters              Scouter[]
  users                 User[]
}

model Tournament {
  key                   String                 @id
  name                  String
  location              String?
  date                  String?
  teamMatchData         TeamMatchData[]
  scouterScheduleShifts ScouterScheduleShift[]
}

model User {
  id               String            @id
  teamNumber       Int?
  team             RegisteredTeam?   @relation(fields: [teamNumber], references: [number])
  email            String            @unique
  emailVerified    Boolean           @default(false)
  username         String?
  role             UserRole          @default(ANALYST)
  tournamentSource String[]
  teamSource       Int[]
  mutablePicklists MutablePicklist[]
  sharedPicklists  SharedPicklist[]
}

enum UserRole { // Do we want to rename these?
  ANALYST
  SCOUTING_LEAD
}
