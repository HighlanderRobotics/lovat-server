generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Event {
  eventUuid       String      @id @default(uuid())
  time            Int
  action          EventAction
  position        Int
  points          Int
  scoutReportUuid String
  scoutReport     ScoutReport @relation(fields: [scoutReportUuid], references: [uuid])
}

enum EventAction {
  PICK_UP_CONE
  PICK_UP_CUBE
  PLACE_OBJECT
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model FeatureToggle {
  feature String  @id
  enabled Boolean @default(true)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model FlaggedScoutReport {
  uuid            String      @id @default(uuid())
  note            String
  scoutReportUuid String      @unique
  ScoutReport     ScoutReport @relation(fields: [scoutReportUuid], references: [uuid])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model TeamMatchData {
  key           String        @id
  tournamentKey String
  tournament    Tournament    @relation(fields: [tournamentKey], references: [key])
  matchNumber   Int           @db.SmallInt
  teamNumber    Int
  matchType     MatchType
  ScoutReport   ScoutReport[]
}

enum MatchType {
  QUALIFICATION
  ELIMINATION
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model MutablePicklist {
  uuid String         @id @default(uuid())
  teams               Int[]
  sourceTeamNumber    Int
  sourceTeam          RegisteredTeam @relation(fields: [sourceTeamNumber], references: [number]) // TODO: Once we have User accounts, this should be a User and we can get the sourceTeamNumber from there and the username
  username            String?
  name                String
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ScoutReport {
  uuid                    String                @id @default(uuid())
  teamMatchKey            String
  teamMatchData           TeamMatchData         @relation(fields: [teamMatchKey], references: [key])
  startTime               DateTime
  notes                   String
  links                   Int
  robotRole               RobotRole
  autoChallengeResult     AutoChallengeResult
  challengeResult         TeleopChallengeResult
  penaltyCard             PenaltyCard
  driverAbility           Int
  teamNumber              Int
  team                    Team                  @relation(fields: [teamNumber], references: [number])
  scouterUuid             String
  scouter                 Scouter               @relation(fields: [scouterUuid], references: [uuid])
  events                  Event[]
  flaggedScoutReport      FlaggedScoutReport?
  RegisteredTeam          RegisteredTeam?       @relation(fields: [registeredTeamTeam], references: [number])
  registeredTeamTeam      Int?                  @db.SmallInt
  Tournament              Tournament?           @relation(fields: [tournamentTournamentKey], references: [key])
  tournamentTournamentKey String?
}

enum RobotRole {
  OFFENSE
  DEFENSE
  FEEDER
  IMMOBILE
}

enum AutoChallengeResult {
  NONE
  DOCKED
  ENGAGED
  FAILED
  MOBILITY
}

enum TeleopChallengeResult {
  NONE
  DOCKED
  ENGAGED
  FAILED
  IN_COMMUNITY
}

enum PenaltyCard {
  NONE
  YELLOW
  RED
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ScouterScheduleShift {
  uuid                    String         @id @default(uuid())
  sourceTeamNumber        Int            @db.SmallInt
  sourceTeam              RegisteredTeam @relation(fields: [sourceTeamNumber], references: [number])
  tournamentKey           String
  tournament              Tournament     @relation(fields: [tournamentKey], references: [key])
  startMatchOrdinalNumber Int
  endMatchOrdinalNumber   Int
  team1                   Int[]
  team2                   Int[]
  team3                   Int[]
  team4                   Int[]
  team5                   Int[]
  team6                   Int[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Scouter {
  uuid               String         @id @default(uuid())
  name               String
  sourceTeamNumber   Int
  sourceTeam         RegisteredTeam @relation(fields: [sourceTeamNumber], references: [number])
  strikes            Int            @default(0)
  scouterReliability Int            @default(0)
  scoutReports       ScoutReport[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model SharedPicklist {
  uuid             String         @id @default(uuid())
  name             String
  avgTotal         Int            @db.SmallInt
  sourceTeamNumber Int
  sourceTeam       RegisteredTeam @relation(fields: [sourceTeamNumber], references: [number])
  username         String? // TODO: Once we have User accounts, this should be a User and we can get the sourceTeamNumber from there and the username
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Team {
  number       Int           @id
  name         String
  scoutReports ScoutReport[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model RegisteredTeam {
  number                Int                    @id
  code                  Int                    @unique // 6 digit code
  email                 String
  emailVerified         Boolean                @default(false)
  teamApproved          Boolean                @default(false)
  username              String? // TODO: Once we have User accounts, this should be a User and we can get the username from there
  mutablePicklists      MutablePicklist[]
  scoutReports          ScoutReport[]
  scouterScheduleShifts ScouterScheduleShift[]
  scouters              Scouter[]
  sharedPicklists       SharedPicklist[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Tournament {
  key                   String                 @id
  name                  String
  location              String?
  date                  String?
  teamMatchData         TeamMatchData[]
  scoutReports          ScoutReport[]
  scouterScheduleShifts ScouterScheduleShift[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Users {
  teamNumber     Int
  email    String  @unique(map: "users_email2_key")
  username String?
  role  UserRole
}
enum UserRole {
  ANALYST
  SCOUTING_LEAD
}
